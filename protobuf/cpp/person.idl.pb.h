// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.idl

#ifndef PROTOBUF_person_2eidl__INCLUDED
#define PROTOBUF_person_2eidl__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_person_2eidl();
void protobuf_AssignDesc_person_2eidl();
void protobuf_ShutdownFile_person_2eidl();

class Person;
class Class;

// ===================================================================

class Person : public ::google::protobuf::Message {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  Person* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 age = 2;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 2;
  inline ::google::protobuf::uint32 age() const;
  inline void set_age(::google::protobuf::uint32 value);

  // optional string address = 3;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 3;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional uint32 num1 = 4;
  inline bool has_num1() const;
  inline void clear_num1();
  static const int kNum1FieldNumber = 4;
  inline ::google::protobuf::uint32 num1() const;
  inline void set_num1(::google::protobuf::uint32 value);

  // optional uint32 num2 = 5;
  inline bool has_num2() const;
  inline void clear_num2();
  static const int kNum2FieldNumber = 5;
  inline ::google::protobuf::uint32 num2() const;
  inline void set_num2(::google::protobuf::uint32 value);

  // optional uint32 num3 = 6;
  inline bool has_num3() const;
  inline void clear_num3();
  static const int kNum3FieldNumber = 6;
  inline ::google::protobuf::uint32 num3() const;
  inline void set_num3(::google::protobuf::uint32 value);

  // optional uint32 num4 = 7;
  inline bool has_num4() const;
  inline void clear_num4();
  static const int kNum4FieldNumber = 7;
  inline ::google::protobuf::uint32 num4() const;
  inline void set_num4(::google::protobuf::uint32 value);

  // optional uint32 num5 = 8;
  inline bool has_num5() const;
  inline void clear_num5();
  static const int kNum5FieldNumber = 8;
  inline ::google::protobuf::uint32 num5() const;
  inline void set_num5(::google::protobuf::uint32 value);

  // optional uint32 num6 = 9;
  inline bool has_num6() const;
  inline void clear_num6();
  static const int kNum6FieldNumber = 9;
  inline ::google::protobuf::uint32 num6() const;
  inline void set_num6(::google::protobuf::uint32 value);

  // optional uint32 num7 = 10;
  inline bool has_num7() const;
  inline void clear_num7();
  static const int kNum7FieldNumber = 10;
  inline ::google::protobuf::uint32 num7() const;
  inline void set_num7(::google::protobuf::uint32 value);

  // optional uint32 num8 = 11;
  inline bool has_num8() const;
  inline void clear_num8();
  static const int kNum8FieldNumber = 11;
  inline ::google::protobuf::uint32 num8() const;
  inline void set_num8(::google::protobuf::uint32 value);

  // optional uint32 num9 = 12;
  inline bool has_num9() const;
  inline void clear_num9();
  static const int kNum9FieldNumber = 12;
  inline ::google::protobuf::uint32 num9() const;
  inline void set_num9(::google::protobuf::uint32 value);

  // optional uint32 num10 = 13;
  inline bool has_num10() const;
  inline void clear_num10();
  static const int kNum10FieldNumber = 13;
  inline ::google::protobuf::uint32 num10() const;
  inline void set_num10(::google::protobuf::uint32 value);

  // optional uint32 num11 = 14;
  inline bool has_num11() const;
  inline void clear_num11();
  static const int kNum11FieldNumber = 14;
  inline ::google::protobuf::uint32 num11() const;
  inline void set_num11(::google::protobuf::uint32 value);

  // optional uint32 num12 = 15;
  inline bool has_num12() const;
  inline void clear_num12();
  static const int kNum12FieldNumber = 15;
  inline ::google::protobuf::uint32 num12() const;
  inline void set_num12(::google::protobuf::uint32 value);

  // optional uint32 num13 = 16;
  inline bool has_num13() const;
  inline void clear_num13();
  static const int kNum13FieldNumber = 16;
  inline ::google::protobuf::uint32 num13() const;
  inline void set_num13(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Person)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_num1();
  inline void clear_has_num1();
  inline void set_has_num2();
  inline void clear_has_num2();
  inline void set_has_num3();
  inline void clear_has_num3();
  inline void set_has_num4();
  inline void clear_has_num4();
  inline void set_has_num5();
  inline void clear_has_num5();
  inline void set_has_num6();
  inline void clear_has_num6();
  inline void set_has_num7();
  inline void clear_has_num7();
  inline void set_has_num8();
  inline void clear_has_num8();
  inline void set_has_num9();
  inline void clear_has_num9();
  inline void set_has_num10();
  inline void clear_has_num10();
  inline void set_has_num11();
  inline void clear_has_num11();
  inline void set_has_num12();
  inline void clear_has_num12();
  inline void set_has_num13();
  inline void clear_has_num13();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* address_;
  ::google::protobuf::uint32 age_;
  ::google::protobuf::uint32 num1_;
  ::google::protobuf::uint32 num2_;
  ::google::protobuf::uint32 num3_;
  ::google::protobuf::uint32 num4_;
  ::google::protobuf::uint32 num5_;
  ::google::protobuf::uint32 num6_;
  ::google::protobuf::uint32 num7_;
  ::google::protobuf::uint32 num8_;
  ::google::protobuf::uint32 num9_;
  ::google::protobuf::uint32 num10_;
  ::google::protobuf::uint32 num11_;
  ::google::protobuf::uint32 num12_;
  ::google::protobuf::uint32 num13_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_person_2eidl();
  friend void protobuf_AssignDesc_person_2eidl();
  friend void protobuf_ShutdownFile_person_2eidl();

  void InitAsDefaultInstance();
  static Person* default_instance_;
};
// -------------------------------------------------------------------

class Class : public ::google::protobuf::Message {
 public:
  Class();
  virtual ~Class();

  Class(const Class& from);

  inline Class& operator=(const Class& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Class& default_instance();

  void Swap(Class* other);

  // implements Message ----------------------------------------------

  Class* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Class& from);
  void MergeFrom(const Class& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string class_name = 1;
  inline bool has_class_name() const;
  inline void clear_class_name();
  static const int kClassNameFieldNumber = 1;
  inline const ::std::string& class_name() const;
  inline void set_class_name(const ::std::string& value);
  inline void set_class_name(const char* value);
  inline void set_class_name(const char* value, size_t size);
  inline ::std::string* mutable_class_name();
  inline ::std::string* release_class_name();
  inline void set_allocated_class_name(::std::string* class_name);

  // repeated .Person persons = 2;
  inline int persons_size() const;
  inline void clear_persons();
  static const int kPersonsFieldNumber = 2;
  inline const ::Person& persons(int index) const;
  inline ::Person* mutable_persons(int index);
  inline ::Person* add_persons();
  inline const ::google::protobuf::RepeatedPtrField< ::Person >&
      persons() const;
  inline ::google::protobuf::RepeatedPtrField< ::Person >*
      mutable_persons();

  // @@protoc_insertion_point(class_scope:Class)
 private:
  inline void set_has_class_name();
  inline void clear_has_class_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* class_name_;
  ::google::protobuf::RepeatedPtrField< ::Person > persons_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_person_2eidl();
  friend void protobuf_AssignDesc_person_2eidl();
  friend void protobuf_ShutdownFile_person_2eidl();

  void InitAsDefaultInstance();
  static Class* default_instance_;
};
// ===================================================================


// ===================================================================

// Person

// required string name = 1;
inline bool Person::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Person::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Person::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Person::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Person::name() const {
  return *name_;
}
inline void Person::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Person::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Person::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Person::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Person::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Person::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 age = 2;
inline bool Person::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Person::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Person::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Person::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 Person::age() const {
  return age_;
}
inline void Person::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
}

// optional string address = 3;
inline bool Person::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Person::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Person::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Person::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& Person::address() const {
  return *address_;
}
inline void Person::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void Person::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void Person::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Person::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* Person::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Person::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 num1 = 4;
inline bool Person::has_num1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Person::set_has_num1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Person::clear_has_num1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Person::clear_num1() {
  num1_ = 0u;
  clear_has_num1();
}
inline ::google::protobuf::uint32 Person::num1() const {
  return num1_;
}
inline void Person::set_num1(::google::protobuf::uint32 value) {
  set_has_num1();
  num1_ = value;
}

// optional uint32 num2 = 5;
inline bool Person::has_num2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Person::set_has_num2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Person::clear_has_num2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Person::clear_num2() {
  num2_ = 0u;
  clear_has_num2();
}
inline ::google::protobuf::uint32 Person::num2() const {
  return num2_;
}
inline void Person::set_num2(::google::protobuf::uint32 value) {
  set_has_num2();
  num2_ = value;
}

// optional uint32 num3 = 6;
inline bool Person::has_num3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Person::set_has_num3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Person::clear_has_num3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Person::clear_num3() {
  num3_ = 0u;
  clear_has_num3();
}
inline ::google::protobuf::uint32 Person::num3() const {
  return num3_;
}
inline void Person::set_num3(::google::protobuf::uint32 value) {
  set_has_num3();
  num3_ = value;
}

// optional uint32 num4 = 7;
inline bool Person::has_num4() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Person::set_has_num4() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Person::clear_has_num4() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Person::clear_num4() {
  num4_ = 0u;
  clear_has_num4();
}
inline ::google::protobuf::uint32 Person::num4() const {
  return num4_;
}
inline void Person::set_num4(::google::protobuf::uint32 value) {
  set_has_num4();
  num4_ = value;
}

// optional uint32 num5 = 8;
inline bool Person::has_num5() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Person::set_has_num5() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Person::clear_has_num5() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Person::clear_num5() {
  num5_ = 0u;
  clear_has_num5();
}
inline ::google::protobuf::uint32 Person::num5() const {
  return num5_;
}
inline void Person::set_num5(::google::protobuf::uint32 value) {
  set_has_num5();
  num5_ = value;
}

// optional uint32 num6 = 9;
inline bool Person::has_num6() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Person::set_has_num6() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Person::clear_has_num6() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Person::clear_num6() {
  num6_ = 0u;
  clear_has_num6();
}
inline ::google::protobuf::uint32 Person::num6() const {
  return num6_;
}
inline void Person::set_num6(::google::protobuf::uint32 value) {
  set_has_num6();
  num6_ = value;
}

// optional uint32 num7 = 10;
inline bool Person::has_num7() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Person::set_has_num7() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Person::clear_has_num7() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Person::clear_num7() {
  num7_ = 0u;
  clear_has_num7();
}
inline ::google::protobuf::uint32 Person::num7() const {
  return num7_;
}
inline void Person::set_num7(::google::protobuf::uint32 value) {
  set_has_num7();
  num7_ = value;
}

// optional uint32 num8 = 11;
inline bool Person::has_num8() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Person::set_has_num8() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Person::clear_has_num8() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Person::clear_num8() {
  num8_ = 0u;
  clear_has_num8();
}
inline ::google::protobuf::uint32 Person::num8() const {
  return num8_;
}
inline void Person::set_num8(::google::protobuf::uint32 value) {
  set_has_num8();
  num8_ = value;
}

// optional uint32 num9 = 12;
inline bool Person::has_num9() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Person::set_has_num9() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Person::clear_has_num9() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Person::clear_num9() {
  num9_ = 0u;
  clear_has_num9();
}
inline ::google::protobuf::uint32 Person::num9() const {
  return num9_;
}
inline void Person::set_num9(::google::protobuf::uint32 value) {
  set_has_num9();
  num9_ = value;
}

// optional uint32 num10 = 13;
inline bool Person::has_num10() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Person::set_has_num10() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Person::clear_has_num10() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Person::clear_num10() {
  num10_ = 0u;
  clear_has_num10();
}
inline ::google::protobuf::uint32 Person::num10() const {
  return num10_;
}
inline void Person::set_num10(::google::protobuf::uint32 value) {
  set_has_num10();
  num10_ = value;
}

// optional uint32 num11 = 14;
inline bool Person::has_num11() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Person::set_has_num11() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Person::clear_has_num11() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Person::clear_num11() {
  num11_ = 0u;
  clear_has_num11();
}
inline ::google::protobuf::uint32 Person::num11() const {
  return num11_;
}
inline void Person::set_num11(::google::protobuf::uint32 value) {
  set_has_num11();
  num11_ = value;
}

// optional uint32 num12 = 15;
inline bool Person::has_num12() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Person::set_has_num12() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Person::clear_has_num12() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Person::clear_num12() {
  num12_ = 0u;
  clear_has_num12();
}
inline ::google::protobuf::uint32 Person::num12() const {
  return num12_;
}
inline void Person::set_num12(::google::protobuf::uint32 value) {
  set_has_num12();
  num12_ = value;
}

// optional uint32 num13 = 16;
inline bool Person::has_num13() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Person::set_has_num13() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Person::clear_has_num13() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Person::clear_num13() {
  num13_ = 0u;
  clear_has_num13();
}
inline ::google::protobuf::uint32 Person::num13() const {
  return num13_;
}
inline void Person::set_num13(::google::protobuf::uint32 value) {
  set_has_num13();
  num13_ = value;
}

// -------------------------------------------------------------------

// Class

// required string class_name = 1;
inline bool Class::has_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Class::set_has_class_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Class::clear_has_class_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Class::clear_class_name() {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    class_name_->clear();
  }
  clear_has_class_name();
}
inline const ::std::string& Class::class_name() const {
  return *class_name_;
}
inline void Class::set_class_name(const ::std::string& value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void Class::set_class_name(const char* value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void Class::set_class_name(const char* value, size_t size) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Class::mutable_class_name() {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  return class_name_;
}
inline ::std::string* Class::release_class_name() {
  clear_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = class_name_;
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Class::set_allocated_class_name(::std::string* class_name) {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete class_name_;
  }
  if (class_name) {
    set_has_class_name();
    class_name_ = class_name;
  } else {
    clear_has_class_name();
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Person persons = 2;
inline int Class::persons_size() const {
  return persons_.size();
}
inline void Class::clear_persons() {
  persons_.Clear();
}
inline const ::Person& Class::persons(int index) const {
  return persons_.Get(index);
}
inline ::Person* Class::mutable_persons(int index) {
  return persons_.Mutable(index);
}
inline ::Person* Class::add_persons() {
  return persons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Person >&
Class::persons() const {
  return persons_;
}
inline ::google::protobuf::RepeatedPtrField< ::Person >*
Class::mutable_persons() {
  return &persons_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_person_2eidl__INCLUDED
